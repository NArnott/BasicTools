@inject IJSRuntime JSRuntime
@inject HostType HostType

<div class="d-flex">
    <canvas @ref="_canvasRef" width="48" />
    <textarea @ref="_textAreaRef" @bind="Value" class="flex-fill code @TextAreaCssClass" spellcheck="false" readonly="@IsReadOnly" placeholder="@Placeholder" />
</div>

@code { 

    ElementReference _canvasRef;
    ElementReference _textAreaRef;

    private string? _value;

    [Parameter]
    public string? Value
    {
        get => _value;
        set
        {
            if (!String.Equals(_value, value))
            {
                _value = value;
                ValueChanged.InvokeAsync(value);
            }
        }
    }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public string? TextAreaCssClass { get; set; }

    [Parameter]
    public string? Placeholder { get; set; }

    [Parameter]
    public bool IsReadOnly { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!HostType.IsPreRender && firstRender)
        {
            var linedTextAreaJs = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/scripts/lined-text-area.js");

            await linedTextAreaJs.InvokeVoidAsync("initialize", _canvasRef, _textAreaRef);
        }
    }

    private async Task OnInputChange(ChangeEventArgs args)
    {
        Value = (string)(args.Value ?? "");
        await ValueChanged.InvokeAsync(Value);
    }
}