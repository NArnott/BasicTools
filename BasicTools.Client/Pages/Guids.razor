@page "/guids"
@attribute [PageMetadata( 
Title = "GUIDs",
Description = "Generate GUID/UUID values",
Keywords = "guid, uuid, guid generator, uuid generator, online guid, onlineguid, globally unique identifier, universal unique identifier, java guid, java uuid, C# guid, C# uuid, globally unique identifier, unique identifier, tool, free"
)]
@attribute [ToolPage("GUID Generation", "Generate GUID/UUID values and output to various format using templates.", faIcon: "fa-atom")] 

<h1>GUID / UUID Generation</h1>

<LayoutSetter>
    <RightSidebar>
        <h4>Generation Mode:</h4>
        <ul>
            <li><strong>Default:</strong><br />Creates GUIDs using the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.guid.newguid" target="msRef">default .NET implementation</a> for creating GUIDs (ex: <span class="code">Guid.NewGuid()</span>)</li>
            <li><strong>Cryptographic:</strong><br />Creates GUIDs using the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.randomnumbergenerator.getbytes" target="msRef">.NET's Random Number Generator</a> to obtain 16 random bytes and <a href="https://docs.microsoft.com/en-us/dotnet/api/system.guid.-ctor#System_Guid__ctor_System_Byte___" target="msRef">constructing a GUID</a> from it.</li>
        </ul>

        <hr />

        <h3>What is a GUID?</h3>
        <p class="mb-0">A GUID is an acronyom that stands for Globally Unique Identifier, they are also referred to as UUIDs or Universaly Unique Identifiers - there is no real difference between the two. Technically they are 128-bit unique reference numbers used in computing which are highly unlikely to repeat when generated despite there being no central GUID authority to ensure uniqueness.</p>
        <p class="text-right"><small><a href="http://guid.one/guid" target="WhatsAGuid">(Full Reference)</a></small></p>
    </RightSidebar>
</LayoutSetter>

<div class="row">
    <div class="col-xl-5 col-lg-6">
        <EditForm EditContext="_editContext" OnValidSubmit="CreateGuids">
            <DataAnnotationsValidator />

            <InputRadioGroup @bind-Value="_createGuidModel.GenerationMode">
                <span class="mr-3">Generation Mode:</span>
                @foreach (var mode in (GenerationModes[])Enum.GetValues(typeof(GenerationModes)))
                {
                    var id = $"mode_{mode}";

                    <div class="form-check form-check-inline" data-toggle="tooltip" title="@mode.GetDescription()">
                        <InputRadio class="form-check-input" Value="mode" id="@id" />
                        <label class="form-check-label" for="@id">@mode.ToString()</label>
                    </div>
                }
            </InputRadioGroup>

            <div class="form-group">
                <label for="createGuidCount">Specify how many GUIDs you want to create (1-250)</label>
                <div class="input-group">
                    <InputNumber id="createGuidCount" class="form-control" @bind-Value="_createGuidModel.CreateGuidCount" />
                    <div class="input-group-append">
                        <button class="btn btn-outline-primary" type="submit">Create Guid(s)</button>
                    </div>
                </div>
                <ValidationMessage class="invalid-feedback" For="() => _createGuidModel.CreateGuidCount" />
            </div>

            <div class="form-group">
                <label for="template">Output Template</label>
                <InputTextAreaOnInput id="template" class="form-control" @bind-Value="_createGuidModel.Template" />

                <p>Sample Output:<br /><span class="code">@_createGuidModel.Sample.ToString()</span></p>
            </div>
        </EditForm>

        <h3>Example Templates</h3>

        @foreach (var exTemp in _exampleTemplates)
        {
            <div class="card mt-2">
                <div class="card-header">
                    @exTemp.Name
                    @if (exTemp.Hint != null)
                    {
                        <Icon Class="ml-1" data-toggle="tooltip" title="@exTemp.Hint" Name="IconName.QuestionCircle" />
                    }
                    <button class="btn btn-sm btn-outline-info float-right" @onclick="exTemp.Select">Use</button>
                </div>
                <div class="card-body">
                    <h5 class="card-title">@exTemp.Template</h5>
                    <small class="card-text">Sample: <span class="code">@exTemp.Sample</span></small>
                </div>
            </div>
        }
    </div>

    <div class="col-xl-7 col-lg-6">
        @if (_guids != null)
        {
            @if (_guids.Length > 1)
            {
                <button class="btn btn-secondary mb-2" @onclick="CopyAllGuids">Copy All</button>
            }

            <div class="list-group">
                @foreach (var guid in _guids)
                {
                    <button class="list-group-item list-group-item-action code @(guid.IsActive ? "active" : "") @(guid.WasActive ? "list-group-item-dark" : "")" @onclick="async () => await SelectGuid(guid)">@guid</button>
                }
            </div>
        }
    </div>
</div>



