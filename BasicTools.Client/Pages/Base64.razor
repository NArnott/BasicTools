@page "/base64/"
@attribute [PageMetadata(
Title = "Base 64 Encoding",
Description = "Encode to Base64 or Decode from Base64. This tool is an easy to use, online tool to encode your data.",
Keywords = "base 64, base64, conversion, encoding, decoding, web based, online base64, tool, free"
)]
@attribute [ToolPage("Base 64 Encoding", "Convert data to and from Base64 encoding.", "Icons.Material.Outlined.TextSnippet")]
@inject ISnackbar ToastService
@inject IJSRuntime JSRuntime
@using System.Text

<MudText Typo="Typo.h3">Base 64 Encoding / Decoding</MudText>

<LayoutSetter>
    <RightSidebar>
        <MudText Typo="Typo.h5">Overview</MudText>
        <MudText>Convert data to and from Base 64 encoding. Paste an encoded or unencoded version on the Input side, and then press the appropriate button to either encode or decode from/to Base64.</MudText>

        <MudText Typo="Typo.h5">What is Base64?</MudText>
        <MudText>When you have some data that you want to ship across a network, you generally don't do it by just streaming the bits and bytes over the wire in a raw format. Why? because some media are made for streaming text. You never know -- some protocols may interpret your binary data as control characters (like a modem), or your binary data could be screwed up because the underlying protocol might think that you've entered a special character combination (like how FTP translates line endings).</MudText>
        <MudText>So to get around this, people encode the binary data into characters. Base64 is one of these types of encodings.</MudText>
        <MudText>    
            Why 64?
            Because you can generally rely on the same 64 characters being present in many character sets, and you can be reasonably confident that your data's going to end up on the other side of the wire uncorrupted.
            <MudLink Href="https://en.wikipedia.org/wiki/Base64" Target="WhatIsBase64" Typo="Typo.subtitle2" Class="ms-auto"><small>(See Wikipedia)</small></MudLink>
        </MudText>
    </RightSidebar>
</LayoutSetter>

<div>
    <MudGrid>
        <MudItem lg="5" xs="12">
            <span class="d-flex">
                <MudText Typo="Typo.h5" Class="me-auto">Input</MudText>
                <MudText Typo="Typo.subtitle2" Class="align-self-end">Size: @Input.Length</MudText>
            </span>
            <LinedTextArea @bind-Value="Input" TextAreaCssClass="input" Placeholder="Type or paste input..." />
        </MudItem>

        <MudItem lg="2" xs="12" Class="justify-center align-start mt-lg-16">
            <MudButton Class="mt-3" Color="Color.Primary" Variant="Variant.Filled" OnClick="Encode" Style="width: 100%">Encode</MudButton>
            <MudButton Class="mt-3" Color="Color.Primary" Variant="Variant.Filled" OnClick="Decode" Style="width: 100%">Decode</MudButton>
        </MudItem>

        <MudItem lg="5" xs="12">
            <span class="d-flex">
                <MudText Typo="Typo.h5" Class="me-2">Output</MudText>
                @if (Output.Length > 0)
                {
                    <MudIconButton OnClick="CopyOutput" Icon="@Icons.Outlined.ContentCopy" Class="me-auto" Title="Copy Output" Size="Size.Small" />
                    <MudText Typo="Typo.subtitle2" Class="align-self-end">Size: @Output.Length</MudText>
                }
            </span>

            <LinedTextArea @bind-Value="Output" TextAreaCssClass="output" IsReadOnly="true" />
        </MudItem>
    </MudGrid>
</div>

@code {
    string Input { get; set; } = "";

    string Output { get; set; } = "";

    void Encode()
    {
        try
        {
            var bytes = Encoding.UTF8.GetBytes(Input);

            Output = Convert.ToBase64String(bytes);
        }
        catch (Exception ex)
        {
            ToastService.Add($"Failed to encode text: {ex.Message}", Severity.Error);
            Output = "";
        }
    }

    void Decode()
    {
        try
        {
            var bytes = Convert.FromBase64String(Input);

            Output = Encoding.UTF8.GetString(bytes);
        }
        catch (Exception ex)
        {
            ToastService.Add($"Failed to decode text: {ex.Message}", Severity.Error);
            Output = "";
        }
    }

    async Task CopyOutput()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", Output);

        ToastService.Add("Copied Output to Clipboard", configure: x => x.Icon = Icons.Filled.ContentCopy);
    }
}